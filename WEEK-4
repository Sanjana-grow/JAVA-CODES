

1.ARRAY OF OBJECTS:
class Student
{
public String name;
Student(String name)
{
this.name=name;
}
public String toString()
{
return name;
}
}
public class Work
{
public static void main(String[] args)
{
Student[] arr=new Student[] {new Student("dharma"),new Student("sanvi"),new Student("rupa"),new Student("raj")};
for(Student m:arr)
{
System.out.println(m);
}
}
}

 
2.TRYING TO ACCESS ELEMENT OUT OF THE ARRAY
public class Work
{
public static void main(String[] args)
{
int [] arr=new int[4];
arr[0]=1;
arr[1]=2;
arr[2]=3;
arr[3]=4;
System.out.println("Trying out of bound");
System.out.println(arr[5]);

 



3.SIMPLE 2D ARRAY
public class Work
{
public static void main(String[] args)
{
int [][] arr=new int[10][20];
arr[0][0]=1;
System.out.println("arr[0][0]="+arr[0][0]);
}
}

 
4.SIMPLE 3D ARRAY

public class Work
{
public static void main(String[] args)
{
int [][][] arr=new int[10][20][30];
arr[0][0][0]=1;
System.out.println("arr[0][0][0]="+arr[0][0][0]);
}
}

 
5.SUM OF ARRAY ELEMENTS
public class Work
{
public static void main(String[] args)
{
int arr[]={1,2,3,4,5};
sum(arr);
}
public static void sum(int[] arr)
{
int sum=0;
for(int i=0;i<arr.length;i++)
sum+=arr[i];

System.out.println("Sum is:"+sum);
}
}

 
6.RETURNING ARRAY USING METHODS
public class Work
{
public static void main(String[] args)
{
int arr[]=m1();
for(int i=0;i<arr.length;i++)
System.out.println(arr[i]+" ");
}
public static int[]m1()
{
return new int[]{1,2,3,4,5};
}
}

 
7.CLASS OBJECTS
public class Work
{
public static void main(String[] args)
{
int arr1[]=new int[3];   //int arr
byte arr2[]=new byte[3]; //bytearr
short arr3[]=new short[3];   //shortsarr
String arr4[]=new String[3];   //stringarr
System.out.println(arr1.getClass());
System.out.println(arr1.getClass().getSuperclass());
System.out.println(arr2.getClass());
System.out.println(arr3.getClass());
System.out.println(arr4.getClass());
}
}

 
8.CLONING
//ID CLONING:DEEP
public class Work
{
public static void main(String[] args)
{
int arr1[]={1,2,3};
int clonearr[]=arr1.clone();
System.out.println(arr1==clonearr);
for(int i=0;i<clonearr.length;i++)
{
System.out.print(clonearr[i]+" ");
}
}
}

 
//2D CLONING:SHALLOW
public class Work
{
public static void main(String[] args)
{
int arr1[][]={{1,2,3},{4,5}};
int clonearr[][]=arr1.clone();
System.out.println(arr1==clonearr);
System.out.println(arr1[0]==clonearr[0]);
System.out.println(arr1[1]==clonearr[1]);
}
}

 
9. SIMPLE CLASS AND OBJECT:
public class Home
{
int x=5;
public static void main(String[] args)
{
Home myobj=new Home();
System.out.println(myobj.x);
}
}

 
10.MULTIPLE OBJECTS FOR SAME CLASS:
public class Home
{
int x=5;
public static void main(String[] args)
{
Home myobj1=new Home();
Home myobj2=new Home();
System.out.println(myobj1.x);
System.out.println(myobj2.x);

}
}

 

11.DEFINING CLASS IN ONE FILE AND USING IT IN ANOTHER FILE
//Home.java
public class Home
{
int x=5;
}
//Sec.java
public class Sec
{
public static void main(String[] args)
{
Home myobj1=new Home();
System.out.println(myobj1.x);
}
}

 
12.MODIFYING ATTRIBUTES IN MAIN:CREATING
public class Home
{
int x;
public static void main(String[] args)
{
Home myobj1=new Home();
myobj1.x=100;
System.out.println(myobj1.x);
}
}

 
13. MODIFYING ATTRIBUTES IN MAIN:OVERRIDING
public class Home
{
int x=10;
public static void main(String[] args)
{
Home myobj1=new Home();
myobj1.x=100;
System.out.println(myobj1.x);
}
}

 
14.AVOIDING MODIFYING ATTRIBUTES IN MAIN:OVERRIDING
//final keyword
public class Home
{
final int x=10;
public static void main(String[] args)
{
Home myobj1=new Home();
myobj1.x=100;
System.out.println(myobj1.x);
}
}

 

15. MODIFYING ATTRIBUTES IN MAIN:AFFECTING ONLY ONE OBJECT
public class Home
{
int x=10;
public static void main(String[] args)
{
Home myobj1=new Home();
Home myobj2=new Home();
myobj2.x=100;
System.out.println(myobj1.x);
System.out.println(myobj2.x);
}
}

 
16.ONE OBJECT,MULTIPLE ATTRIBUTES
public class Home
{
String fname="John";
String lname="Doe";
int age=24;
public static void main(String[] args)
{
Home myobj1=new Home();
System.out.println("Name: "+myobj1.fname+" "+myobj1.lname);
System.out.println("Age: "+myobj1.age);
}
}

 
17.CLASS METHODS
public class Home
{
static void my()
{
System.out.println("HELLO WORLD!");
}
public static void main(String[] args)
{
my();
}
}

 
18.DIFFERENCE BETWEEN STATIC AND PUBLIC FUNCTIONS
public class Home
{
static void my()   //static method
{
System.out.println("HELLO WORLD!");
}
public void mypublic()   //public method
{
System.out.println("This is public func");
}
public static void main(String[] args)
{
my();
Home myobj1=new Home();
myobj1.mypublic();
}
}

 
19.PASSING VALUES TO CLASS FUNCTION
public class Home
{
public void mythro()   //static method
{
System.out.println("HELLO WORLD!");
}
public void speed(int max)   //public method
{
System.out.println("MAX SPEED "+max);
}
public static void main(String[] args)
{
Home myobj1=new Home();
myobj1.mythro();
myobj1.speed(200);

}
}

 
20.CONSTRUCTORS
public class Home
{
int x;
public Home()   //constructor
{
x=5;
}
public static void main(String[] args)
{
Home myobj1=new Home();
System.out.println(myobj1.x);

}
}


 
21.PARAMETRIZED CONSTRUCTOR
public class Home
{
int x;
public Home(int y)   //PARAMTERISED constructor
{
x=y;
}
public static void main(String[] args)
{
Home myobj1=new Home(20);
System.out.println(myobj1.x);

}
}

 




